import * as moment from 'moment';
import { Plugin } from '../model/plugin';
import { Ref } from '../model/ref';

export const originPlugin: Plugin = {
  tag: '+plugin/origin',
  name: $localize`🏛️ Remote Origin`,
  config: {
    type: 'core',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    submit: $localize`🏛️ origin`,
    settings: $localize`origin`,
    icons: [{ label: $localize`🏛️` }],
    description: $localize`Replicate a remote Jasper instance. The remote
     origin will be scraped on an interval you specify.
     If the remote is also set up to replicate from this instance, you may
     communicate with remote users.
     You may configure if metadata is generated or plugins are validated. `,
  },
  schema: {
    optionalProperties: {
      local: { type: 'string' },
      remote: { type: 'string' },
      proxy: { type: 'string' },
    },
  },
};

export const originPullPlugin: Plugin = {
  tag: '+plugin/origin/pull',
  name: $localize`🏛️📥️ Remote Origin Pull`,
  config: {
    type: 'core',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    submitChild: $localize`📥️ pull`,
    icons: [{ label: $localize`📥️` }],
    description: $localize`Replicate a remote Jasper instance. The remote
      origin will be scraped on an interval you specify.
      If the remote is also set up to replicate from this instance, you may
      communicate with remote users.
      You may configure if metadata is generated or plugins are validated. `,
  },
  defaults: {
    pullInterval: 'PT15M',
    generateMetadata: true,
    validatePlugins: true,
    validateTemplates: true,
    validationOrigin: '',
  },
  schema: {
    properties: {
      pullInterval: { type: 'string' },
    },
    optionalProperties: {
      query: { type: 'string' },
      lastPull: { type: 'string' },
      batchSize: { type: 'int32' },
      generateMetadata: { type: 'boolean' },
      validatePlugins: { type: 'boolean' },
      validateTemplates: { type: 'boolean' },
      validationOrigin: { type: 'string' },
      originFromTag: { type: 'string' },
      addTags: { elements: { type: 'string' } },
      removeTags: { elements: { type: 'string' } },
    },
  },
};

export const originPushPlugin: Plugin = {
  tag: '+plugin/origin/push',
  name: $localize`🏛️📤️ Remote Origin Push`,
  config: {
    type: 'core',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    submitChild: $localize`📤️ push`,
    icons: [{ label: $localize`📤️` }],
    description: $localize`Pushed modifications to a remote origin.
      On the scrape interval set, the server will check if the remote cursor is
      behind the local cursor. If writeOnly is set, this check is skipped and
      the lastModifiedWritten config is used instead.`,
  },
  defaults: {
    pushInterval: 'PT15M',
    writeOnly: true,
  },
  schema: {
    properties: {
      pushInterval: { type: 'string' },
    },
    optionalProperties: {
      query: { type: 'string' },
      lastPush: { type: 'string' },
      batchSize: { type: 'int32' },
      writeOnly: { type: 'boolean' },
      lastModifiedRefWritten: { elements: { type: 'string' } },
      lastModifiedExtWritten: { elements: { type: 'string' } },
      lastModifiedUserWritten: { elements: { type: 'string' } },
      lastModifiedPluginWritten: { elements: { type: 'string' } },
      lastModifiedTemplateWritten: { elements: { type: 'string' } },
    },
  },
};

export const originTunnelPlugin: Plugin = {
  tag: '+plugin/origin/tunnel',
  name: $localize`🏛️🕳️️️ Origin Tunnel`,
  config: {
    type: 'core',
    experimental: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    submitChild: $localize`🕳️️️ tunnel`,
    icons: [{ label: $localize`🕳️️️` }],
    description: $localize`Create an SSH tunnel`,
    ui: `
      <div class="bubble form">
        <span class="nowrap">User Tag:</span>
        <div>{{ user }}</div>

        <span class="nowrap">SSH Host:</span>
        <textarea disabled>{{ sshHost }}</textarea>
      </div>
    `,
    form: [{
      key: 'user',
      type: 'input',
      props: {
        label: $localize`User Tag:`,
        required: true,
      },
    }, {
      key: 'sshHost',
      type: 'url',
      props: {
        label: $localize`SSH Host:`,
      },
    }],
  },
  schema: {
    properties: {
      user: { type: 'string' },
    },
    optionalProperties: {
      sshHost: { type: 'string' },
    },
  },
};

export function isReplicating(remote: Ref, url: string, origin = '') {
  const plugin = remote.plugins?.['+plugin/origin'];
  return remote.url === url && (plugin?.remote || '') === origin;
}

import * as Handlebars from 'handlebars';
import * as moment from 'moment';
import { Plugin } from '../model/plugin';
import { Ref } from '../model/ref';

// https://github.com/handlebars-lang/handlebars.js/issues/1593
// @ts-ignore
window.global = {};

Handlebars.registerHelper('userVoted', (ref: Ref, value: string) => {
  return ref.metadata?.userUrls?.includes('plugin/poll.' + value);
});

Handlebars.registerHelper('votePercentage', (ref: Ref, value: string) => {
  const total =
    (ref.metadata?.plugins?.['plugin/poll.a'] || 0) +
    (ref.metadata?.plugins?.['plugin/poll.b'] || 0) +
    (ref.metadata?.plugins?.['plugin/poll.c'] || 0) +
    (ref.metadata?.plugins?.['plugin/poll.d'] || 0);
  if (!total) return 0;
  return Math.floor(100 * (ref.metadata?.plugins?.['plugin/poll.' + value] || 0) / total);
});

export const pollPlugin: Plugin = {
  tag: 'plugin/poll',
  name: $localize`üó≥Ô∏è Poll`,
  config: {
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Create a multiple choice poll and view the results.`,
    icons: [
      { label: $localize`üó≥Ô∏è` },
    ],
    submit: $localize`üó≥Ô∏è poll`,
    genUrl: true,
    actions: [
      { response: 'plugin/poll.a', clear: ['plugin/poll.a', 'plugin/poll.b', 'plugin/poll.c', 'plugin/poll.d'], labelOff: $localize`A`, labelOn: $localize`unvote` },
      { response: 'plugin/poll.b', clear: ['plugin/poll.a', 'plugin/poll.b', 'plugin/poll.c', 'plugin/poll.d'], labelOff: $localize`B`, labelOn: $localize`unvote` },
      { response: 'plugin/poll.c', clear: ['plugin/poll.a', 'plugin/poll.b', 'plugin/poll.c', 'plugin/poll.d'], labelOff: $localize`C`, labelOn: $localize`unvote` },
      { response: 'plugin/poll.d', clear: ['plugin/poll.a', 'plugin/poll.b', 'plugin/poll.c', 'plugin/poll.d'], labelOff: $localize`D`, labelOn: $localize`unvote` },
    ],
    filters: [
      { query: 'plugin/poll', label: $localize`üó≥Ô∏è poll`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    css: `
      .poll-results {
        display: inline-block !important;
        padding: 10px;
        min-width: min(100vw, 300px);
      }
      .poll-results div {
        margin: 2px;
        padding: 4px;
        white-space: nowrap;
        overflow: visible;
        border-radius: 6px;
        background-color: rgba(128, 128, 128, 0.5);
      }
      .poll-results .voted:after {
        content: ' ‚òëÔ∏è ';
      }
    `,
    ui: `
      <div class="poll-results bubble">
        <div {{#if (userVoted ref 'a')}} class="voted" {{/if}} style="width: {{ votePercentage ref 'a' }}%">{{ a }} {{ votePercentage ref 'a' }}%</div>
        <div {{#if (userVoted ref 'b')}} class="voted" {{/if}} style="width: {{ votePercentage ref 'b' }}%">{{ b }} {{ votePercentage ref 'b' }}%</div>
        <div {{#if (userVoted ref 'c')}} class="voted" {{/if}} style="width: {{ votePercentage ref 'c' }}%">{{ c }} {{ votePercentage ref 'c' }}%</div>
        <div {{#if (userVoted ref 'd')}} class="voted" {{/if}} style="width: {{ votePercentage ref 'd' }}%">{{ d }} {{ votePercentage ref 'd' }}%</div>
      </div>
    `,
    form: [{
      key: 'a',
      type: 'input',
      props: {
        label: $localize`Option A:`,
      },
    }, {
      key: 'b',
      type: 'input',
      props: {
        label: $localize`Option B:`,
      },
    }, {
      key: 'c',
      type: 'input',
      props: {
        label: $localize`Option C:`,
      },
    },{
      key: 'd',
      type: 'input',
      props: {
        label: $localize`Option D:`,
      },
    }],
  },
  schema: {
    optionalProperties: {
      a: { type: 'string' },
      b: { type: 'string' },
      c: { type: 'string' },
      d: { type: 'string' },
    },
  },
};

export const pollOptionAPlugin: Plugin = {
  tag: 'plugin/poll.a',
  name: $localize`üé´Ô∏è Poll Option A`,
  config: {
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
  },
  generateMetadata: true,
  userUrl: true,
};

export const pollOptionBPlugin: Plugin = {
  tag: 'plugin/poll.b',
  name: $localize`üé´Ô∏è Poll Option B`,
  config: {
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
  },
  generateMetadata: true,
  userUrl: true,
};

export const pollOptionCPlugin: Plugin = {
  tag: 'plugin/poll.c',
  name: $localize`üé´Ô∏è Poll Option C`,
  config: {
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
  },
  generateMetadata: true,
  userUrl: true,
};

export const pollOptionDPlugin: Plugin = {
  tag: 'plugin/poll.d',
  name: $localize`üé´Ô∏è Poll Option D`,
  config: {
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
  },
  generateMetadata: true,
  userUrl: true,
};
